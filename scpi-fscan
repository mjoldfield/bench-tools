#! /usr/bin/perl

#
# scpi-fscan
#
# Copyright (c) 2018 Martin Oldfield <bench-tools@mjoldfield.com>
#

use strict;
use warnings;

package MSO;

use IO::Socket::INET;

use YAML;

sub new
  {
    my ($c, @args) = @_;

    my $self = bless {}, $c;

    my $sock = IO::Socket::INET->new(PeerPort => 5025, @args);
    $self->{socket} = $sock;

    return $self;
  }

sub print
  {
    my $s = shift;
    $s->{socket}->print(@_);
  }

sub getline
  {
    my $s = shift;
    $s->{socket}->getline;
  }
    
sub run_cmd
  {
    my ($s, $cmd, $resp) = @_;

    chomp $cmd;
    $cmd .= "\n";
    
    $s->print($cmd);
    print "-> $cmd";

    return unless $resp;
    
    my $ret = $s->getline();
    chomp $ret;

    print "<- $ret\n";

    return $ret;
  }

sub init
  {
    my $mso = shift;

    $mso->channel_init(1);
    $mso->channel_init(2);
    
    $mso->wavegen_init;
    $mso->timebase_init;
    $mso->measurements_init;
  }

sub wavegen_init
  {
    my $mso = shift;

    $mso->run_cmd(':WGEN:RST');
    $mso->run_cmd(':WGEN:FUNC SIN');
    $mso->run_cmd(':WGEN:VOLT 1.0E+0');
    $mso->run_cmd(':WGEN:VOLT:OFFS 0.0E+0');
    $mso->run_cmd(':WGEN:OUTP ON');
  
    $mso->run_cmd(':WGEN?', 1);
  }
  
sub wavegen_set_freq
  {
    my ($mso, $f) = @_;

    $mso->run_cmd(sprintf(':WGEN:FREQ %.4g', $f));
  }

sub timebase_init
  {
    my $mso = shift;

    $mso->run_cmd(':TIM:MODE MAIN');
    $mso->run_cmd(':TIM:POS 0.0E+0');
    $mso->run_cmd(':TIM:REF CENT');

    $mso->run_cmd(':TIM?', 1);
  }

sub timebase_set_time  
  {
    my ($mso, $t) = @_;

    $mso->run_cmd(sprintf(':TIM:RANG %.4g', $t));
  }

sub measurements_init
  {
    my $mso = shift;
    
    $mso->run_cmd(':ACQ:TYPE AVER');
    $mso->run_cmd(':ACQ:COUN 256');
    
    $mso->run_cmd(':MEAS:CLEAR');
    
    $mso->run_cmd(':MEAS:VPP CHAN1');
    $mso->run_cmd(':MEAS:VPP CHAN2');
    $mso->run_cmd(':MEAS:VRAT CYCL,CHAN2,CHAN1');
    $mso->run_cmd(':MEAS:PHAS CHAN2,CHAN1');

    $mso->run_cmd(':MEAS:STAT ON');
  }

sub measurements_clear_stats
  {
    my $mso = shift;

    $mso->run_cmd(':MEAS:STAT:RES');
  }

sub read_all
  {
    my ($mso, $t) = @_;

    $t //= 2.0; # default accumulation time in seconds

    # allowed full scale ranges i.e. 8x volts per div
    my @ranges = map { ($_ * 8, $_ * 16, $_ * 40) } (0.01, 0.1, 1.0);

    my %tried;
    while(1)
      {
	my $ok = 1; # optimism!
    
	$mso->measurements_clear_stats;
    
	sleep($t);
	
	my $d = $mso->measurements_read;

	# Look at all the channels where we are measuring the Pk-Pk
	# voltage and adjust the y gain on the scope sensibly
	my @channels = map { /^Pk-Pk\((\d+)\)$/ } keys %$d;

      CHAN:
	foreach my $chan (sort @channels)
	  {
	    my $k = "Pk-Pk($chan)";
	    my $v = $d->{$k}->{mean};

	    my $range = sprintf "%f", $mso->run_cmd(":CHAN$chan:RANG?", 1);
	    $d->{$k}->{range} = $range;

	    # if the range is OK don't tweak it: this also stops the scope hunting
	    # between two resonable alternatives
	    next CHAN if $v > 0.25 * $range && $v < $range;

	    # new range should be the smallest which puts the trace on
	    # less than 75% of the screen
	    my ($new_range) = grep { 0.75 * $_ > $v } @ranges;

	    # if we don't have $new_range here, it means the signal is large
	    # either because we are feeding e.g. 100V to the scope, or we've
	    # got the overload condn => V reported as 9.9E37
	    #
	    # set range to maxiumum and hope for the best
	    #
	    $new_range //= $ranges[-1];

	    # if the last reading wasn't optimal, set the range and flag
	    # that we need to redo the measurements
	    if (abs($range - $new_range) / $new_range > 1e-6)
	      {
		$mso->run_cmd(":CHAN$chan:RANG $new_range");
		undef $ok;
	      }
	  }

	if ($ok)
	  {
	    return $d;
	  }
      }
	      
  }
  
sub measurements_read
  {
    my $mso = shift;

    my @names = qw(field current min max mean stddev count);

    
    my $r = $mso->run_cmd(':MEAS:RES?',1);

    my @f = split(/,/, $r);

    my %all;
    while(@f)
      {
	my %d;
	foreach my $name (@names)
	  {
	    $d{$name} = shift @f;
	  }

	my $field = delete $d{field};
	$all{$field} = \%d;
      }

    return \%all;
  }

sub channel_init
  {
    my ($mso, $n) = @_;

    $mso->run_cmd(":CHAN$n:COUP AC");
    $mso->run_cmd(":CHAN$n:BWL ON");
    $mso->run_cmd(":CHAN$n:DISP 1");

    $mso->run_cmd(":CHAN$n:RANG 1.6E+0V");
    $mso->run_cmd(":CHAN$n:OFFS 0.0E+0V");    
  }
    
sub get_ieee_binary_block
  {
    my $io = shift;
    
    # We get an IEEE block in response. See e.g.
    # http://na.support.keysight.com/pna/help/latest/Programming/Learning_about_GPIB/Getting_Data_from_the_Analyzer.htm#block
    my $header;
    read($io, $header, 2);
  
    # length of length
    my ($m) = ($header =~ /^#(\d)$/)
	or die "Unable to parse header A: $header, ";

    # length of data
    read($io, $header, $m);
    my ($n) = ($header =~ /^(\d+)$/)
	or die "Unable to parse header B: $header, ";

    # data
    my $data;
    read($io, $data, $n);

    # end-of-line
    $io->getline;

    return $data;
  }
  
package main;

use Pod::Usage;
use Getopt::Long;

$| = 1;
  
my %Opt;
GetOptions(\%Opt, "help!", "info!");
  
pod2usage(-verbose => 2)
    if $Opt{help} || $Opt{info};

my $addr = shift || 'mso.local';
my $file = shift || 'resp.dat';

my $mso = MSO->new(PeerAddr => $addr)
  or die "Unable to open MSO connection, ";

$mso->run_cmd('*IDN?', 1);

$mso->init;

my $n_per_decade = 10;
my $ratio = 10.0 ** (1/$n_per_decade);  

my @fs;  
foreach my $fbase (10, 100, 1000, 10000)
  {
    my $f = $fbase;
    foreach my $i (1..$n_per_decade)
      {
	push(@fs, $f);
	$f *= $ratio;
      }
  }

my @d;
foreach my $f (@fs, reverse @fs)
  {
    push(@d, test_freq($mso, $f));
  }
  
open(my $fh, '>', $file);
foreach my $d (@d)
  {
    printf {$fh} "%f %f %f\n", @$d;
  }

sub test_freq
  {
    my ($mso, $f) = @_;
    
    $mso->wavegen_set_freq($f);

    my $n_cycles = 3;
    my $t = $n_cycles / $f;
    $mso->timebase_set_time($t);

    # Allow some time for circuit to settle: this doesn't seem
    # critical
    sleep(1);
        
    # the time here sets the integration time for the stats
    # 0.1s is too small
    my $d = $mso->read_all(1);
    
    my $phase = $d->{'Phase(2-1)'}->{mean};
    my $amp   = $d->{'Ratio - N Cycles(2-1)'}->{mean};
    
   return [ $f, $amp, $phase ];
  }

  
__END__
  
=head1 NAME
 
scpi-fscan - Measure a frequency response using a SCPI scope
 
=head1 USAGE

    $ scpi-fscan mso.local resp.dat

    $ scpi-fscan mso.local

    $ scpi-fscan

    
=head1 DESCRIPTION

Measure the frequency response of an external circuit.

It has been tested with the Agilent MSO-X 3034A scope
but might work more generally

We use the Wavegen function of the scope to generate
a sine wave, then measure the difference in phase and
amplitude between CHAN1 and CHAN2.

Normally you would connect the Wavegen output and CHAN1
to the input of the circuit under test, and CHAN2 to its
output.
    
The frequency is swept between 10Hz and nearly 100kHz, and
unscientific pauses are included in the code both to allow
any transients to abate and for data to be accumulated.
    
Both the timebase and the Y-scales are controlled by the
program in the hope of capturing reasonable data. We
change the acquisition mode to average over 256 events.    

=head2 OUTPUT FORMAT

Data are saved to a three-column, space-separated file. Each
line contains:

=over

=item Frequency

In Hertz.

=item Magnitude

Expressed as a power gain in dB i.e. -20.0 implies one hundredth
of the power, or one tenth of the amplitude.

=item Phase

Expressed in degrees.

=back

=head1 OPTIONS

You can specify two positional arguments: address and filename.

Named arguments also exist:

=over

=item --help, --info

Display this page.

=back

=head1 DEPENDENCIES

None for the core code, C<Pod::Usage> and C<Getopt::Long> for
the the friendly fluff.

=head1 ACKNOWLEDGEMENTS

The 3000 X-Series programming guide explained what needed to be
done. You can get that from 
L<http://www.keysight.com/upload/cmc_upload/All/3000_series_prog_guide.pdf>

Key features:

=over

=item Reading Definite-Length Block Query Response Data

Shows how the binary image data are returned.

=item :DISPlay:DATA

Shows how to request the image.

=item *IDN (Identification Number)

Shows how to identify the instrument.

=item Telnet Sockets

Describes the network interface.

=back
 
=head1 BUGS AND LIMITATIONS

This program is a quick hack: do not rely on it for critical
appliations.

Please report problems to the author.

Patches are welcome.

=head1 WEBSITE

Available from GitHub L<https://github.com/mjoldfield/bench-tools>
 
=head1 AUTHOR

M J Oldfield, bench-tools@mjoldfied.com

=head1 LICENCE AND COPYRIGHT
 
Copyright (c) 2015, M J Oldfield
 
This program is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program.  If not, see <http://www.gnu.org/licenses/>.
    
